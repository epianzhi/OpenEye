package com.qj.kaiyan.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.qj.kaiyan.entitys.CoverCoverter;
import com.qj.kaiyan.entitys.HomeResultItem.CoverBean;

import com.qj.kaiyan.entitys.HomeResultItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HOME_RESULT_ITEM".
*/
public class HomeResultItemDao extends AbstractDao<HomeResultItem, Long> {

    public static final String TABLENAME = "HOME_RESULT_ITEM";

    /**
     * Properties of entity HomeResultItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Category = new Property(1, String.class, "category", false, "CATEGORY");
        public final static Property Cover = new Property(2, String.class, "cover", false, "COVER");
        public final static Property Duration = new Property(3, int.class, "duration", false, "DURATION");
        public final static Property PlayUrl = new Property(4, String.class, "playUrl", false, "PLAY_URL");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
    }

    private final CoverCoverter coverConverter = new CoverCoverter();

    public HomeResultItemDao(DaoConfig config) {
        super(config);
    }
    
    public HomeResultItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HOME_RESULT_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: _id
                "\"CATEGORY\" TEXT," + // 1: category
                "\"COVER\" TEXT," + // 2: cover
                "\"DURATION\" INTEGER NOT NULL ," + // 3: duration
                "\"PLAY_URL\" TEXT," + // 4: playUrl
                "\"TITLE\" TEXT);"); // 5: title
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HOME_RESULT_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HomeResultItem entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(2, category);
        }
 
        CoverBean cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(3, coverConverter.convertToDatabaseValue(cover));
        }
        stmt.bindLong(4, entity.getDuration());
 
        String playUrl = entity.getPlayUrl();
        if (playUrl != null) {
            stmt.bindString(5, playUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HomeResultItem entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String category = entity.getCategory();
        if (category != null) {
            stmt.bindString(2, category);
        }
 
        CoverBean cover = entity.getCover();
        if (cover != null) {
            stmt.bindString(3, coverConverter.convertToDatabaseValue(cover));
        }
        stmt.bindLong(4, entity.getDuration());
 
        String playUrl = entity.getPlayUrl();
        if (playUrl != null) {
            stmt.bindString(5, playUrl);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public HomeResultItem readEntity(Cursor cursor, int offset) {
        HomeResultItem entity = new HomeResultItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category
            cursor.isNull(offset + 2) ? null : coverConverter.convertToEntityProperty(cursor.getString(offset + 2)), // cover
            cursor.getInt(offset + 3), // duration
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // playUrl
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // title
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HomeResultItem entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategory(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCover(cursor.isNull(offset + 2) ? null : coverConverter.convertToEntityProperty(cursor.getString(offset + 2)));
        entity.setDuration(cursor.getInt(offset + 3));
        entity.setPlayUrl(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(HomeResultItem entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(HomeResultItem entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(HomeResultItem entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
